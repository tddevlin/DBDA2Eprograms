df = data.frame(x = 1:3, y = c("a","b","c"))
df
str(df)
attributes(df)
typeof(df)
as.matrix(df)
?as.matrix
df = data.frame()
df
x <- c(2.1, 4.2, 3.3., 5.4)
x <- c(2.1, 4.2, 3.3, 5.4)
x
str(x)
x[c(3,1)]
order(x)
?order
x[order(x)]
x[c(1,1,1)]
T
T == True
T == TRUE
x > 3
x
y <- setNames(x, letters[1;4])
y <- setNames(x, letters[1:4])
(y <- setNames(x, letters[1:4]))
y
str(y)
attributes(y)
x
x[1]
typeof(x[1])
typeof(x)
length(x[1])
length(1)
length(3)
a <- matrix(1:9, nrow = 3)
a
colnames(a) <- c("A", "B", "C")
a
a[1:2,]
a[c(T,F,T), c("B","A")]
?outer
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
str(df)
names(df)
rownames(df)
df2 = data.frame(1:9, nrow =3)
df2
?data.frame
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[-1:4,]
mtcars[-1:-4,]
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5,]
mtcars[mtcars$cyl == 4 | 6, ]
6 | TRUE
6 | FALSE
-6 | FALSE
0 | FALSE
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]
typeof(NA)
x <- 1:5
X
X
x
x[TRUE]
x[F]
x[NA]
upper.tri()
?upper.tri
x <- outer(1:5, 1:5, FUN = "*")
x
upper.tri(x)
x[upper.tri(x)]
dim(mtcars)
mtcars[1:20]
a = matrix(1:12, nrow = 4)
a
length(a)
dim(a)
dim(a)[1]
?diag
min(dim(a))
diag(a)
myDiag <- function(x) {
return(x[c(1:min(dim(x)), 1:min(dim(x)))])
}
myDiag(a)
a
upper.tri(x)
-upper.tri(x)
not upper.tri(x)
~upper.tri(x)
!upper.tri(x)
!upper.tri(x) & !lower.tri(x)
upper.tri(a)
myDiag <- function(x) {
diag.matrix = !upper.tri(x) & !lower.tri(x)
return(x[diag.matrix])
}
a
diag(a)
myDiag(a)
df
df
df[is.na(df)]
df
df[2,2] <- NA
df
df[is.na(df)]
is.na(df)
f <- function(
a,
b,
c
) {
return(1)
}
f(1,2,3)
f <- function(
a,
b,
c,
) {
return(1)
}
f <- function(
a,
b,
c
) {
return(1)
}
f <- function(
a,
b,
c,
) {
return(1)
}
f <- function(
a,
b,
c,
) {
return(1)
}
mod <- lm(mpg ~ wt, data = mtcars)
mod
str(mod)
mod$df.residual
summary(mod)
str(summary(mod))
summary(mod)$r.squared
mod[["df.residuals"]]
mod[["df.residual"]]
mod["df.residual"]
str(mod[["df.residual"]])
str(mod["df.residual"])
clear
clear()
1 + 3
c(1, 5, 7)
rep(1, 20)
rep(1, 200)
matrix(c(1,2,3,4), nrows=2)
matrix(c(1,2,3,4), nrow=2)
sqrt(100)
birthday("Tyler")
ggplot(2)
23
age <- 23
age
birthyear <- 1994
birthyear + age
birthyear + age
1994 + age
1994 + 23
age
age <- age + 1
age
age <- 23 + 1
age = 60
age = 2 * age
age
age <- age + age + 2 * age
age
age
age <- age + age + 2 * age
age
?lm
??Logistic
y <- c(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1)
x <- c(39, 64, 75, 34, 22, 50, 54, 65, 72, 33, 59, 41, 65, 72, 56, 61)
model <- glm(y ~x,family=binomial(link='logit'))
model
plot(x,y)
str(model)
model
summary(model)
exp(coef(model))
predict(model, x)
predict(model, x, type = "response")
predict(model, data.frame(x), type = "response")
round(predict(model, data.frame(x), type = "response"))
round(predict(model, data.frame(x), type = "response")) == y
mean(round(predict(model, data.frame(x), type = "response")) == y)
?fitted
?predict
?fitted
fitted(model)
?aov
?tapply
x <- c(49, 66, 50, 54, 58, 38, 67, 43)
x <- c(49, 66, 50, 54, 58, 38, 67, 43)
y <- c(1,1,0,1,0,1,0,0)
tapply(x, y, mean)
y <- c(0,0,1,1,0,1,0,0)
tapply(x, y, mean)
y <- c(0,1,0,1,0,1,1,1)
tapply(x, y, mean)
y <- c(1,0,0,1,1,1,0,1)
tapply(x, y, mean)
library(statsr)
library(dplyr)
library(ggplot2)
install.packages("statsr")
####################################################################
# opening graphics windows and saving graphs
source("DBDA2E-utilities.R")             # read defn. of openGraph, saveGraph
setwd("~/Documents/DBDA2Eprograms")
####################################################################
# opening graphics windows and saving graphs
source("DBDA2E-utilities.R")             # read defn. of openGraph, saveGraph
openGraph( width=3 , height=4 )          # open a graphics window
plot( x=1:4 , y=c(1,3,2,4) , type="o" )  # make a plot in the screen window
